# File fallback example for configuration that does not exist in the active BeanManager
# that use HOCON file format: https://github.com/typesafehub/config/blob/master/HOCON.md
#
# This is how beans are defined:
#
#  schema-one {
#    instance-one {
#      property-one  = value
#      property-two  = value
#      reference-one = instance
#      reference-two = [instance, instance-two]
#      # etc
#    }
#    instance-two {
#      # etc
#    }
#  }
#  schema-two {
#      # etc
#  }
#

GrandfatherSchemaName {
    # instance id
    g10 {
        # list of Strings
        prop2 = [c, b, a]
        # list of Integer
        prop3 = [2, 1]
        # DateTime
        prop4 = "2002-09-24-06:00"
        # DurationTime
        prop5 = PT15H
        # Byte
        prop8 = 1
        # Long
        prop9 = 1000000000000
        # Short
        prop10 = 123
        # Float
        prop11 = 12313.13
        # Double
        prop12 = 238.476238746834796
        # Boolean
        prop13 = yes
        # TimeUnit
        prop14 = NANOSECONDS
        # URL
        prop15 = "http://www.deephacks.org"
        # File
        prop16 = .
        # List of File
        prop17 = [., .]
        # List of URL
        prop18 = ["http://www.deephacks.org", "http://www.google.se"]
        # List of TimeUnit enum
        prop19 = [DAYS, HOURS]
        prop21 = 1

        # list of references to ParentSchemaName
        prop7 = [p10, p11]
    }

    g11 {
        prop3 = [2, 1]
    }
}

# instances can be defined using same schema name multiple times.
GrandfatherSchemaName {
    g12 {
        prop3 = [2, 1]
    }
}

# schema name for org.deephacks.confit.test.Parent
ParentSchemaName {
    # instance id
    p10 {
        prop1 = p10
        prop7 = [c10]
    }

    # instance id
    p11 {
        prop7 = [c10]
    }
}

# schema name for org.deephacks.confit.test.Child
ChildSchemaName {
    # instance id
    c10 {
        # Float
        prop11 = 1.1
    }
}

# 'singleton' reference to 'SingletonSchemaName' is implicit
SingletonParentSchemaName {
    property = SingletonParentSchemaName
}

# simplified property=value format works for singletons
SingletonSchemaName.property=SingletonSchemaName
SingletonSchemaName.parent=p10

A.name=A
B.name=B
